# A two line theme inspired by paradox.
#
# This theme requires a font that has been patched by NerdFonts.
# https://github.com/ryanoasis/nerd-fonts
#
# Authors:
#   Eric Cool <coolazura@gmail.com>
#

# Load dependencies.
pmodload 'helper'

# Define variables. SEE: paradox
_prompt_terminus_current_bg='NONE'
_prompt_terminus_segment_lseparator=''
_prompt_terminus_segment_rseparator=''
_prompt_terminus_start_time=$SECONDS
_prompt_terminus_clocks=("" "" "" "" "" "" "" "" "" "" "" "")

function prompt_terminus_print_separator {
  local side
  side=$1
  if [[ "$side" == "left" ]]; then
    print -n "$_prompt_terminus_segment_lseparator"
  elif [[ "$side" == "right" ]]; then
    print -n "$_prompt_terminus_segment_rseparator"
  fi
}

# SEE: paradox
function prompt_terminus_start_segment {
  local side bg fg
  side=$1
  [[ -n "$2" ]] && bg="%K{$2}" || bg="%k"
  [[ -n "$3" ]] && fg="%F{$3}" || fg="%f"
  if [[ "$side" == "left" ]]; then
    if [[ "$_prompt_terminus_current_bg" != 'NONE' && "$2" != "$_prompt_terminus_current_bg" ]]; then
      print -n " $bg%F{$_prompt_terminus_current_bg}"
      print -n "$(prompt_terminus_print_separator $side)"
      print -n "$fg "
    else
      print -n "$bg$fg "
    fi
  else
    print -n "%F{$2}$(prompt_terminus_print_separator $side)"
    print -n "$bg$fg "
  fi
  _prompt_terminus_current_bg="$2"
  [[ -n "$4" ]] && print -n "$4"
}

# SEE: paradox
function prompt_terminus_end_segment {
  # local side
  # side=$1
  if [[ -n "$_prompt_terminus_current_bg" ]]; then
    print -n " %k%F{$_prompt_terminus_current_bg}"
    print -n "$(prompt_terminus_print_separator left)"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_terminus_current_bg=""
}

# SEE: paradox
function prompt_terminus_build_lprompt {
  prompt_terminus_start_segment left black default "%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}⚙ :)%F{blue}%n%F{red}@%F{green}%m%f"
  prompt_terminus_start_segment left blue black "$(prompt-pwd)"

  if [[ -n "$git_info" ]]; then
    prompt_terminus_start_segment left green black "${(e)git_info[ref]}${(e)git_info[status]}"
  fi

  if [[ -n "$python_info" ]]; then
    prompt_terminus_start_segment left white black "${(e)python_info[virtualenv]}"
  fi

  prompt_terminus_end_segment
}

function prompt_terminus_build_rprompt {
  prompt_terminus_start_segment right black default "$(prompt_terminus_print_clock) %D{%H:%M:%S} "
}

function prompt_terminus_print_clock {
  # Get the current hour in a 12hour format.
  local hour=$(date +"%-I")

  # Print the clock icon.
  print -n "%B${_prompt_terminus_clocks[$hour]}%b"
}

# SEE: paradox
function prompt_terminus_preexec {
  _prompt_terminus_start_time="$SECONDS"
}

# SEE: paradox
function prompt_terminus_print_elapsed_time() {
  local end_time=$(( SECONDS - _prompt_terminus_start_time ))
  local hours minutes seconds remainder

  if (( end_time >= 3600 )); then
    hours=$(( end_time / 3600 ))
    remainder=$(( end_time % 3600 ))
    minutes=$(( remainder / 60 ))
    seconds=$(( remainder % 60 ))
    print -P "%B%F{red} ﲊ elapsed time ${hours}h ${minutes}m ${seconds}s%b"
  elif (( end_time >= 60 )); then
    minutes=$(( end_time / 60 ))
    seconds=$(( end_time % 60 ))
    print -P "%B%F{yellow} 羽elapsed time ${minutes}m ${seconds}s%b"
  elif (( end_time > 10 )); then
    print -P "%B%F{green} ﮫ elapsed time ${end_time}s%b"
  fi
}

# SEE: paradox
function prompt_terminus_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Get Python environment information.
  if (( $+functions[python-info] )); then
    python-info
  fi

  # Calculate and print the elapsed time.
  prompt_terminus_print_elapsed_time
}

function prompt_terminus_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling precmd before each command.
  add-zsh-hook preexec prompt_terminus_preexec
  add-zsh-hook precmd prompt_terminus_precmd

  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Set editor-info parameters. SEE: paradox
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-info parameters. SEE: paradox
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' ⁝ %s'
  zstyle ':prezto:module:git:info:added' format ' ✚'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ✖'
  zstyle ':prezto:module:git:info:dirty' format ' ⁝'
  zstyle ':prezto:module:git:info:modified' format ' ✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # %v - virtualenv name.
  zstyle ':prezto:module:python:info:virtualenv' format ' %v'

  # Define prompts.
  PROMPT='
$(prompt_terminus_build_lprompt)
 ${editor_info[keymap]} '
  RPROMPT='$(prompt_terminus_build_rprompt)'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_terminus_setup "$@"
